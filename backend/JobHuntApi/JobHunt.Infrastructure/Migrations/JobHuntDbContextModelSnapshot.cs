// <auto-generated />
using System;
using JobHunt.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace JobHunt.Infrastructure.Migrations
{
    [DbContext(typeof(JobHuntDbContext))]
    partial class JobHuntDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("JobHunt.Domain.Models.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("city");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("country");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("street");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("addresses", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("0ca4032a-b0c0-4d25-8575-f5b065d7df54"),
                            City = "Warsaw",
                            Country = "Poland",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Street = "Krakowskie Przedmieście 10",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("525c49eb-3406-4210-9125-6085e59b4eb3"),
                            City = "Kraków",
                            Country = "Poland",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Street = "Floriańska 15",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("81829923-f40e-4f58-9506-08da478058a2"),
                            City = "Gdańsk",
                            Country = "Poland",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Street = "Dluga 20",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("760b41f0-1ae8-4140-aeaa-c51edb8524dd"),
                            City = "Wrocław",
                            Country = "Poland",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Street = "Rynek 5",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("65997657-6342-4461-991e-d9ef4cc27808"),
                            City = "Poznań",
                            Country = "Poland",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Street = "Święty Marcin 45",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("c4d716dc-e536-4f93-affd-1eca9be155f1"),
                            City = "Łódź",
                            Country = "Poland",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Street = "Piotrkowska 31",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("02cb7c97-8ac4-4df1-b9bb-a9ff6732c728"),
                            City = "Lublin",
                            Country = "Poland",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Street = "Krakowskie Przedmieście 2",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("eb0bf179-2a90-42f2-a778-0457f10280b7"),
                            City = "Katowice",
                            Country = "Poland",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Street = "3 Maja 9",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("6dceaa73-c28e-4aa5-b148-aa673e9b80b5"),
                            City = "Bydgoszcz",
                            Country = "Poland",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Street = "Gdańska 14",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("aecc1bcc-91a9-406c-9258-b38bbd12fdb9"),
                            City = "Szczecin",
                            Country = "Poland",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Street = "Aleja Wyzwolenia 21",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("61e53104-cc1e-4403-b781-ac2a9d90a675"),
                            City = "Gdynia",
                            Country = "Poland",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Street = "Świętojańska 6",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("d1977ab7-eef3-4def-ae48-66f65922b471"),
                            City = "Toruń",
                            Country = "Poland",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Street = "Rynek Staromiejski 3",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("a538082d-1000-4b50-b6ea-7e0f8b715c14"),
                            City = "Opole",
                            Country = "Poland",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Street = "Krakowska 7",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("bc05e016-1537-41f6-80b3-9bbf991dd39c"),
                            City = "Rzeszów",
                            Country = "Poland",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Street = "3 Maja 12",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("3a55e504-11f1-4c82-8628-692982996558"),
                            City = "Białystok",
                            Country = "Poland",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Street = "Lipowa 15",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("9c654eec-ba66-40a6-8bf7-160591a9a602"),
                            City = "Zielona Góra",
                            Country = "Poland",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Street = "Bohaterów Westerplatte 10",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("5f6ec67a-de91-4260-a1cf-50aebeb8181b"),
                            City = "Gliwice",
                            Country = "Poland",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Street = "Zwycięstwa 22",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("6270749d-0b30-4e83-8374-12d23c22271a"),
                            City = "Sopot",
                            Country = "Poland",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Street = "Monte Cassino 25",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("868f8731-4a07-44fd-bd27-4acb4a35f77f"),
                            City = "Koszalin",
                            Country = "Poland",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Street = "Zwycięstwa 5",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("4b23304a-d75c-4dff-8b86-402a8656f39c"),
                            City = "Radom",
                            Country = "Poland",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Street = "Żeromskiego 16",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("JobHunt.Domain.Models.Experience", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("company_name");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("location");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("position");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uuid")
                        .HasColumnName("profile_id");

                    b.Property<string>("Responsibility")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("responsibility");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<DateOnly>("WorkFrom")
                        .HasColumnType("date")
                        .HasColumnName("work_from");

                    b.Property<DateOnly>("WorkTo")
                        .HasColumnType("date")
                        .HasColumnName("work_to");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.ToTable("experiences", (string)null);
                });

            modelBuilder.Entity("JobHunt.Domain.Models.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("image_url");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("images", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("b7a18197-c6d6-47c4-ab72-d3a042b646c3"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://jobhuntstorage.blob.core.windows.net/images/jfd.jpg",
                            Name = "jfd.jpg",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("47219591-466c-4f33-bd2e-4b165844b4da"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://jobhuntstorage.blob.core.windows.net/images/mfd.jpg",
                            Name = "mfd.jpg",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("9788b6d6-2dfd-4272-8249-43a66bfc5e2b"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://jobhuntstorage.blob.core.windows.net/images/sfd.png",
                            Name = "sfd.png",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("fc8e5936-d76a-4d3a-bc64-d91d6d6e7da9"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://jobhuntstorage.blob.core.windows.net/images/lfd.png",
                            Name = "lfd.png",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("7d296ead-d7f2-4f9d-a2d9-f756b0aaa1a4"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://jobhuntstorage.blob.core.windows.net/images/jbd.jpg",
                            Name = "jbd.jpg",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("5f890acc-9532-4c56-9e3c-07a45a91dc83"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://jobhuntstorage.blob.core.windows.net/images/mbd.jpg",
                            Name = "mbd.jpg",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("239b185c-4d37-4b01-baba-001b4425794a"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://jobhuntstorage.blob.core.windows.net/images/sbd.png",
                            Name = "sbd.png",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("caa67e3a-d380-4a7f-9921-bce41d768349"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://jobhuntstorage.blob.core.windows.net/images/lbd.png",
                            Name = "lbd.png",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("ba1c1bbf-cd15-49ce-8fcb-d744593c5299"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://jobhuntstorage.blob.core.windows.net/images/jfld.png",
                            Name = "jfld.png",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("0c97833d-79fb-43d9-a1e1-25032d81ad77"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://jobhuntstorage.blob.core.windows.net/images/mfld.png",
                            Name = "mfld.png",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("f884c7f8-502a-49a6-acde-7350a412b097"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://jobhuntstorage.blob.core.windows.net/images/sfld.png",
                            Name = "sfld.png",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("01761843-a4d3-4dbd-988b-977094f0a083"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://jobhuntstorage.blob.core.windows.net/images/lfld.png",
                            Name = "lfld.png",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("32bafe62-e9ba-4c2a-9f2a-76053c689eff"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://jobhuntstorage.blob.core.windows.net/images/jgd.jpg",
                            Name = "jgd.jpg",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("a7bcaf46-c806-4bf4-825f-e17852cd276c"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://jobhuntstorage.blob.core.windows.net/images/mgd.jpg",
                            Name = "mgd.jpg",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("20deaa5a-9243-4e3d-bed1-dc0a23aaccd3"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://jobhuntstorage.blob.core.windows.net/images/sgd.jpg",
                            Name = "sgd.jpg",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("d86c3bf1-22f9-467a-bb25-a335508074c2"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://jobhuntstorage.blob.core.windows.net/images/lgd.png",
                            Name = "lgd.png",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("39fd3f9a-1911-4676-b4cf-d245f68a83a7"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://jobhuntstorage.blob.core.windows.net/images/jmd.png",
                            Name = "jmd.png",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("ba513f10-c72d-4cdb-a105-d6b462ec61fe"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://jobhuntstorage.blob.core.windows.net/images/mmd.png",
                            Name = "mmd.png",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("8b9cea71-52d1-46fd-b1e7-b2b54726bfa6"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://jobhuntstorage.blob.core.windows.net/images/smd.jpg",
                            Name = "smd.jpg",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("aa697543-3225-4e7b-8baf-83d71683b2c8"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://jobhuntstorage.blob.core.windows.net/images/lmd.png",
                            Name = "lmd.png",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("JobHunt.Domain.Models.Job", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AboutCompany")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("about_company");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uuid")
                        .HasColumnName("address_id");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("company_name");

                    b.Property<string>("ContractType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("contract_type");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<Guid>("ImageId")
                        .HasColumnType("uuid")
                        .HasColumnName("image_id");

                    b.Property<string>("JobLevel")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("job_level");

                    b.Property<string>("OperationMode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("operation_mode");

                    b.Property<string>("Requirements")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("requirements");

                    b.Property<string>("Responsibilities")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("responsibilities");

                    b.Property<string>("Salary")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("salary");

                    b.Property<string>("Technology")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("technology");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.HasIndex("ImageId")
                        .IsUnique();

                    b.HasIndex("Title", "JobLevel", "Technology", "Type")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Title", "JobLevel", "Technology", "Type"), "GIN");

                    b.ToTable("jobs", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("2f9e3626-08a3-4d9c-90d4-101f9e58287c"),
                            AboutCompany = "Web and mobile dev",
                            AddressId = new Guid("81829923-f40e-4f58-9506-08da478058a2"),
                            CompanyName = "Code Factory",
                            ContractType = "UOP",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "f948c6b6-2651-4cf5-a4ae-a2046511989d",
                            ImageId = new Guid("b7a18197-c6d6-47c4-ab72-d3a042b646c3"),
                            JobLevel = "Junior",
                            OperationMode = "Remote",
                            Requirements = "1+ years in HTML/CSS, Javascript, React",
                            Responsibilities = "Assist in frontend dev",
                            Salary = "4000-5000 zł brutto",
                            Technology = "Js",
                            Title = "Junior Frontend Developer",
                            Type = "Frontend",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("5b74933d-d06f-4bca-b8d7-b6bebd643e51"),
                            AboutCompany = "Web innovation leaders",
                            AddressId = new Guid("760b41f0-1ae8-4140-aeaa-c51edb8524dd"),
                            CompanyName = "Web Wonders",
                            ContractType = "UOP",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "f948c6b6-2651-4cf5-a4ae-a2046511989d",
                            ImageId = new Guid("47219591-466c-4f33-bd2e-4b165844b4da"),
                            JobLevel = "Middle",
                            OperationMode = "Hybrid",
                            Requirements = "3+ years with Angular, TypeScript",
                            Responsibilities = "Develop frontend apps",
                            Salary = "6000-8000 zł brutto",
                            Technology = "Typescript",
                            Title = "Middle Frontend Developer",
                            Type = "Frontend",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("58709e94-9ada-4ca8-8f7a-4a076a2ab9ec"),
                            AboutCompany = "Leading in AI solutions",
                            AddressId = new Guid("0ca4032a-b0c0-4d25-8575-f5b065d7df54"),
                            CompanyName = "Tech Innovators",
                            ContractType = "B2B",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "f948c6b6-2651-4cf5-a4ae-a2046511989d",
                            ImageId = new Guid("9788b6d6-2dfd-4272-8249-43a66bfc5e2b"),
                            JobLevel = "Senior",
                            OperationMode = "Remote",
                            Requirements = "5+ years experience with React",
                            Responsibilities = "Develop UI components, optimize for performance",
                            Salary = "10000-12000 zł netto",
                            Technology = "React",
                            Title = "Senior Frontend Developer",
                            Type = "Frontend",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("15213a54-0e96-475a-b93d-70b4e91a23bd"),
                            AboutCompany = "Web dev specialists",
                            AddressId = new Guid("525c49eb-3406-4210-9125-6085e59b4eb3"),
                            CompanyName = "WebWorks",
                            ContractType = "B2B",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "f948c6b6-2651-4cf5-a4ae-a2046511989d",
                            ImageId = new Guid("fc8e5936-d76a-4d3a-bc64-d91d6d6e7da9"),
                            JobLevel = "Lead",
                            OperationMode = "Hybrid",
                            Requirements = "7+ years with React, javascript, html, css",
                            Responsibilities = "Oversee frontend projects",
                            Salary = "15000-20000 zł netto",
                            Technology = "Js",
                            Title = "Lead Frontend Engineer",
                            Type = "Frontend",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("2f4f1f5e-7d70-4bfa-ba52-55a0655d1b66"),
                            AboutCompany = "Focus on data analytics",
                            AddressId = new Guid("65997657-6342-4461-991e-d9ef4cc27808"),
                            CompanyName = "DataX Solutions",
                            ContractType = "B2B",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "c5bb0f28-a52d-4c3a-9fec-6e7eb50da633",
                            ImageId = new Guid("7d296ead-d7f2-4f9d-a2d9-f756b0aaa1a4"),
                            JobLevel = "Junior",
                            OperationMode = "Hybrid",
                            Requirements = "1+ years with .NET",
                            Responsibilities = "Assist backend development team",
                            Salary = "5000-6000 zł netto",
                            Technology = ".Net",
                            Title = "Junior Backend Developer",
                            Type = "Backend",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("7cdab76b-6e62-4717-a46c-d38c8e590162"),
                            AboutCompany = "Data science leaders",
                            AddressId = new Guid("02cb7c97-8ac4-4df1-b9bb-a9ff6732c728"),
                            CompanyName = "DataScience Co",
                            ContractType = "UOP",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "c5bb0f28-a52d-4c3a-9fec-6e7eb50da633",
                            ImageId = new Guid("5f890acc-9532-4c56-9e3c-07a45a91dc83"),
                            JobLevel = "Middle",
                            OperationMode = "Remote",
                            Requirements = "3+ years with Python, Flask",
                            Responsibilities = "Develop API services",
                            Salary = "7000-9000 zł brutto",
                            Technology = "Python",
                            Title = "Middle Backend Developer",
                            Type = "Backend",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("71cafc82-a482-4055-aba5-55fe616eae39"),
                            AboutCompany = "Experts in cloud tech",
                            AddressId = new Guid("c4d716dc-e536-4f93-affd-1eca9be155f1"),
                            CompanyName = "Cloudify",
                            ContractType = "B2B",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "c5bb0f28-a52d-4c3a-9fec-6e7eb50da633",
                            ImageId = new Guid("239b185c-4d37-4b01-baba-001b4425794a"),
                            JobLevel = "Senior",
                            OperationMode = "Remote",
                            Requirements = "5+ years in backend dev, Python, Django",
                            Responsibilities = "Design backend services",
                            Salary = "12000-15000 zł netto",
                            Technology = "Python",
                            Title = "Senior Backend Engineer",
                            Type = "Backend",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("97444e85-cd7c-4f68-8799-95f3de6b7215"),
                            AboutCompany = "Backend solutions",
                            AddressId = new Guid("eb0bf179-2a90-42f2-a778-0457f10280b7"),
                            CompanyName = "CoreTech",
                            ContractType = "UOP",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "c5bb0f28-a52d-4c3a-9fec-6e7eb50da633",
                            ImageId = new Guid("caa67e3a-d380-4a7f-9921-bce41d768349"),
                            JobLevel = "Lead",
                            OperationMode = "Onsite",
                            Requirements = "7+ years in backend dev, Java, Spring Boot",
                            Responsibilities = "Lead backend projects",
                            Salary = "15000-20000 zł brutto",
                            Technology = "Java",
                            Title = "Lead Backend Developer",
                            Type = "Backend",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("116a86e2-4d69-42c1-b0dc-44777f218daa"),
                            AboutCompany = "Web innovation hub",
                            AddressId = new Guid("61e53104-cc1e-4403-b781-ac2a9d90a675"),
                            CompanyName = "WebGen",
                            ContractType = "UOP",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "1ad681aa-e3d3-49b8-be8c-ce8fea3bd62d",
                            ImageId = new Guid("ba1c1bbf-cd15-49ce-8fcb-d744593c5299"),
                            JobLevel = "Junior",
                            OperationMode = "Remote",
                            Requirements = "Experience with HTML, CSS, JavaScript",
                            Responsibilities = "Support web projects",
                            Salary = "4000-5000 zł brutto",
                            Technology = "Js",
                            Title = "Junior Fullstack Developer",
                            Type = "Fullstack",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("c4ddd05a-581e-4be6-9e29-1e8d604e9e38"),
                            AboutCompany = "Web solutions specialists",
                            AddressId = new Guid("6dceaa73-c28e-4aa5-b148-aa673e9b80b5"),
                            CompanyName = "App Builders",
                            ContractType = "B2B",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "1ad681aa-e3d3-49b8-be8c-ce8fea3bd62d",
                            ImageId = new Guid("0c97833d-79fb-43d9-a1e1-25032d81ad77"),
                            JobLevel = "Middle",
                            OperationMode = "Remote",
                            Requirements = "3+ years with JS & Node",
                            Responsibilities = "Develop web applications",
                            Salary = "7000-9000 zł netto",
                            Technology = "Js",
                            Title = "Middle Fullstack Developer",
                            Type = "Fullstack",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("b517cc87-5322-4b4d-8d90-a8b839e1a24a"),
                            AboutCompany = "Comprehensive IT services",
                            AddressId = new Guid("aecc1bcc-91a9-406c-9258-b38bbd12fdb9"),
                            CompanyName = "DigitalCraft",
                            ContractType = "UOP",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "1ad681aa-e3d3-49b8-be8c-ce8fea3bd62d",
                            ImageId = new Guid("f884c7f8-502a-49a6-acde-7350a412b097"),
                            JobLevel = "Senior",
                            OperationMode = "Hybrid",
                            Requirements = "5+ years in fullstack dev, , Ruby on Rails, JavaScript",
                            Responsibilities = "Develop fullstack apps",
                            Salary = "11000-14000 zł brutto",
                            Technology = "JavaScript",
                            Title = "Senior Fullstack Developer",
                            Type = "Fullstack",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("3bc88c56-6eef-480f-a940-18bd21ddba27"),
                            AboutCompany = "IT and web solutions",
                            AddressId = new Guid("d1977ab7-eef3-4def-ae48-66f65922b471"),
                            CompanyName = "Total Solutions",
                            ContractType = "UOP",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "1ad681aa-e3d3-49b8-be8c-ce8fea3bd62d",
                            ImageId = new Guid("01761843-a4d3-4dbd-988b-977094f0a083"),
                            JobLevel = "Lead",
                            OperationMode = "Remote",
                            Requirements = "7+ years in fullstack dev, JavaScript, Node.js, React",
                            Responsibilities = "Lead fullstack projects",
                            Salary = "16000-19000 zł brutto",
                            Technology = "Javascript",
                            Title = "Lead Fullstack Developer",
                            Type = "Fullstack",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("f37a58b9-5f15-4576-ab26-a766c1bdaab0"),
                            AboutCompany = "Creative app developers",
                            AddressId = new Guid("bc05e016-1537-41f6-80b3-9bbf991dd39c"),
                            CompanyName = "AppLab",
                            ContractType = "B2B",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "b2cdded4-83f2-41da-ad9f-8feed8e0c300",
                            ImageId = new Guid("39fd3f9a-1911-4676-b4cf-d245f68a83a7"),
                            JobLevel = "Junior",
                            OperationMode = "Onsite",
                            Requirements = "Basic knowledge in Swift, iOS",
                            Responsibilities = "Support mobile dev team",
                            Salary = "7000-9000 zł netto",
                            Technology = "Swift",
                            Title = "Junior Mobile Developer",
                            Type = "Mobile",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("4e78f3c6-ba66-425d-b488-e349435bbc4d"),
                            AboutCompany = "Mobile app innovation",
                            AddressId = new Guid("a538082d-1000-4b50-b6ea-7e0f8b715c14"),
                            CompanyName = "NextGen Mobile",
                            ContractType = "B2B",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "b2cdded4-83f2-41da-ad9f-8feed8e0c300",
                            ImageId = new Guid("ba513f10-c72d-4cdb-a105-d6b462ec61fe"),
                            JobLevel = "Middle",
                            OperationMode = "Hybrid",
                            Requirements = "2+ years in mobile dev, Kotlin",
                            Responsibilities = "Maintain mobile apps",
                            Salary = "10000-13000 zł netto",
                            Technology = "Kotlin",
                            Title = " Middle Mobile Developer",
                            Type = "Mobile",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("02052c90-4f85-469b-a6dd-0143e80cc688"),
                            AboutCompany = "Top mobile solutions",
                            AddressId = new Guid("3a55e504-11f1-4c82-8628-692982996558"),
                            CompanyName = "MobiSolutions",
                            ContractType = "UOP",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "b2cdded4-83f2-41da-ad9f-8feed8e0c300",
                            ImageId = new Guid("8b9cea71-52d1-46fd-b1e7-b2b54726bfa6"),
                            JobLevel = "Senior",
                            OperationMode = "Hybrid",
                            Requirements = "5+ years in mobile dev, , Android, Kotlin",
                            Responsibilities = "Design mobile features",
                            Salary = "15000-20000 zł brutto",
                            Technology = "Kotlin",
                            Title = "Senior Mobile Developer",
                            Type = "Mobile",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("11e54c47-9a04-4584-a523-20fb7909d067"),
                            AboutCompany = "Specializing in mobile tech",
                            AddressId = new Guid("9c654eec-ba66-40a6-8bf7-160591a9a602"),
                            CompanyName = "AppSphere",
                            ContractType = "UOP",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "b2cdded4-83f2-41da-ad9f-8feed8e0c300",
                            ImageId = new Guid("aa697543-3225-4e7b-8baf-83d71683b2c8"),
                            JobLevel = "Lead",
                            OperationMode = "Onsite",
                            Requirements = "7+ years in mobile dev, Swift",
                            Responsibilities = "Oversee mobile development",
                            Salary = "20000-25000 zł brutto",
                            Technology = "Swift",
                            Title = "Lead Mobile Developer",
                            Type = "Mobile",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("bb4e2c5f-2c02-4576-b01e-bd48a362c079"),
                            AboutCompany = "Renowned in game dev",
                            AddressId = new Guid("6270749d-0b30-4e83-8374-12d23c22271a"),
                            CompanyName = "PlayMax Studios",
                            ContractType = "B2B",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "b2cdded4-83f2-41da-ad9f-8feed8e0c300",
                            ImageId = new Guid("32bafe62-e9ba-4c2a-9f2a-76053c689eff"),
                            JobLevel = "Junior",
                            OperationMode = "Remote",
                            Requirements = "Experience with Unity, C#",
                            Responsibilities = "Write game mechanics code",
                            Salary = "8000-9000 zł netto",
                            Technology = "C#",
                            Title = "Junior Game Developer",
                            Type = "GameDev",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("d5a24bff-c85f-4bc3-8708-a0e39bec6aea"),
                            AboutCompany = "Innovators in gaming",
                            AddressId = new Guid("5f6ec67a-de91-4260-a1cf-50aebeb8181b"),
                            CompanyName = "GameForge",
                            ContractType = "UOP",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "1ad681aa-e3d3-49b8-be8c-ce8fea3bd62d",
                            ImageId = new Guid("a7bcaf46-c806-4bf4-825f-e17852cd276c"),
                            JobLevel = "Middle",
                            OperationMode = "Onsite",
                            Requirements = "3+ years with Unity,C#",
                            Responsibilities = "Create engaging game logic",
                            Salary = "10000-12000 zł brutto",
                            Technology = "C#",
                            Title = "Middle Game Developer",
                            Type = "Gamedev",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("46a7218b-8b76-4fba-92fd-a1ea61380da8"),
                            AboutCompany = "A renowned leader in AAA game development",
                            AddressId = new Guid("868f8731-4a07-44fd-bd27-4acb4a35f77f"),
                            CompanyName = "PlayMax Studios",
                            ContractType = "UOP",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "f948c6b6-2651-4cf5-a4ae-a2046511989d",
                            ImageId = new Guid("20deaa5a-9243-4e3d-bed1-dc0a23aaccd3"),
                            JobLevel = "Senior",
                            OperationMode = "Remote",
                            Requirements = "5+ years with Unity or Unreal Engine, strong C# or C++ skills",
                            Responsibilities = "Develop complex game systems, mentor junior developers",
                            Salary = "14000-17000 zł brutto",
                            Technology = "C#",
                            Title = "Senior Game Developer",
                            Type = "GameDev",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("bdc15363-aceb-4cf3-bde8-dd5fdd227272"),
                            AboutCompany = "Industry leader in immersive gaming experiences",
                            AddressId = new Guid("4b23304a-d75c-4dff-8b86-402a8656f39c"),
                            CompanyName = "Epic Games Studio",
                            ContractType = "UOP",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "c5bb0f28-a52d-4c3a-9fec-6e7eb50da633",
                            ImageId = new Guid("d86c3bf1-22f9-467a-bb25-a335508074c2"),
                            JobLevel = "Lead",
                            OperationMode = "Onsite",
                            Requirements = "7+ years in game development, experience leading large projects, Unreal Engine, C++, Game Design",
                            Responsibilities = "Lead the game development team, oversee project lifecycle",
                            Salary = "18000-20000 zł brutto",
                            Technology = "C++",
                            Title = "Lead Game Developer",
                            Type = "GameDev",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("JobHunt.Domain.Models.JobApplication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AboutInformation")
                        .HasColumnType("text")
                        .HasColumnName("about_information");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<string>("Cv")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("cv");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<Guid>("JobId")
                        .HasColumnType("uuid")
                        .HasColumnName("job_id");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("lastname");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Phone")
                        .HasColumnType("text")
                        .HasColumnName("phone");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.ToTable("job_applications", (string)null);
                });

            modelBuilder.Entity("JobHunt.Domain.Models.Profile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uuid")
                        .HasColumnName("address_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<Guid>("ImageId")
                        .HasColumnType("uuid")
                        .HasColumnName("image_id");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("lastname");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phone");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.HasIndex("ImageId")
                        .IsUnique();

                    b.ToTable("profiles", (string)null);
                });

            modelBuilder.Entity("JobHunt.Domain.Models.University", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("EducationLevel")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("education_level");

                    b.Property<string>("FieldOfStudy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("field_of_study");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uuid")
                        .HasColumnName("profile_id");

                    b.Property<string>("Specialization")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("specialization");

                    b.Property<DateOnly>("StudyFrom")
                        .HasColumnType("date")
                        .HasColumnName("study_from");

                    b.Property<DateOnly>("StudyTo")
                        .HasColumnType("date")
                        .HasColumnName("study_to");

                    b.Property<string>("UniversityName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("university_name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.ToTable("universities", (string)null);
                });

            modelBuilder.Entity("JobHunt.Infrastructure.Identity.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "Employer",
                            NormalizedName = "EMPLOYER"
                        },
                        new
                        {
                            Id = "2",
                            Name = "Employee",
                            NormalizedName = "EMPLOYEE"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("JobHunt.Domain.Models.Experience", b =>
                {
                    b.HasOne("JobHunt.Domain.Models.Profile", null)
                        .WithMany("Experiences")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JobHunt.Domain.Models.Job", b =>
                {
                    b.HasOne("JobHunt.Domain.Models.Address", "Address")
                        .WithOne()
                        .HasForeignKey("JobHunt.Domain.Models.Job", "AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobHunt.Domain.Models.Image", "Image")
                        .WithOne()
                        .HasForeignKey("JobHunt.Domain.Models.Job", "ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("JobHunt.Domain.Models.JobApplication", b =>
                {
                    b.HasOne("JobHunt.Domain.Models.Job", "Job")
                        .WithMany("JobApplications")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Job");
                });

            modelBuilder.Entity("JobHunt.Domain.Models.Profile", b =>
                {
                    b.HasOne("JobHunt.Domain.Models.Address", "Address")
                        .WithOne()
                        .HasForeignKey("JobHunt.Domain.Models.Profile", "AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobHunt.Domain.Models.Image", "Image")
                        .WithOne()
                        .HasForeignKey("JobHunt.Domain.Models.Profile", "ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("JobHunt.Domain.Models.University", b =>
                {
                    b.HasOne("JobHunt.Domain.Models.Profile", null)
                        .WithMany("Universities")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JobHunt.Domain.Models.Job", b =>
                {
                    b.Navigation("JobApplications");
                });

            modelBuilder.Entity("JobHunt.Domain.Models.Profile", b =>
                {
                    b.Navigation("Experiences");

                    b.Navigation("Universities");
                });
#pragma warning restore 612, 618
        }
    }
}
